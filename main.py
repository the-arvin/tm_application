# -*- coding: utf-8 -*-
"""
Created on Fri Oct 27 00:36:38 2023

@author: Arvin Jay
"""
import streamlit as st
from py_functions import gbq_utils,cleaning_utils
from datetime import datetime
import plotly.graph_objects as go


st.set_page_config(layout="wide",page_title='TMChallenge by AEscolano')

hard_coded_link = 'https://drive.google.com/file/d/1UAO5oOF1-BdDUFSySa9roIkOwytqtguO/view'
user = 'TM Warrior'
st.session_state['i'] = 0
st.session_state['from_csv'] = 0

@st.cache_data
def gather_bqdata(i,secret):
    """
    Gather data from BigQuery based on an index with a caching decorator. 
    The index is necessary in order for the function to proceed when 
    a button is pushed. 

    Args:
        i: An index 

    Returns:
        Data retrieved from BigQuery.
    """
    return gbq_utils.query_bq_table(secret)


@st.cache_data
def get_warriors(df):
    """
    Get a list of sorted unique users from the dataframe.

    Args:
        df: the cleaned and loaded dataframe.

    Returns:
        A list of sorted unique warrior names.
    """
    return sorted(list(df.user.unique()))


@st.cache_data
def generate_dates(df,user):
    """
    Generate start and end dates for a specific user.

    Args:
        df: The DataFrame containing user data.
        user: The user name for which dates are generated.

    Returns:
        A tuple of start and end dates for the checkin of a respective user.
    """
    start_date = df[df.user==user].timestamp.min().date()
    end_date = df[df.user==user].timestamp.max().date()
    return start_date,end_date


def filter_day(df,date):
    # Filter data for a selected day
    return df[df.timestamp.dt.date==date], datetime.strftime(date,'%B %d, %Y')


def filter_week(df,date):
    # Filter data for a selected week
    desired_week = date.isocalendar()[1]
    desired_year = date.year
    return df[df.timestamp.dt.isocalendar().week==desired_week], f"Week {desired_week} of {desired_year}"


def filter_month(df,date):
    # Filter data for a selected month
    desired_year = date.year
    desired_month = date.month
    return df[(df.timestamp.dt.year==desired_year)&(df.timestamp.dt.month==desired_month)], datetime.strftime(date,'%B %Y')


def filter_year(df,date):
    # Filter data for a selected year
    return df[df.timestamp.dt.year==date.year], datetime.strftime(date,'%Y')


def df_filter(df,date,criteria):
    """
    Filter data based on a specified date and date segment.

    Args:
        df: The DataFrame containing user data.
        date: The specific date for filtering.
        criteria: The filtering criteria ('Day', 'Week', 'Month', 'Year', or 'Overall').

    Returns:
        Filtered data and a customized time string.
    """
    if criteria == 'Day':
        return filter_day(df,date)
    elif criteria == 'Week':
        return filter_week(df,date)
    elif criteria == 'Month':
        return filter_month(df,date)
    elif criteria == 'Year':
        return filter_year(df,date)
    else:
        return df,None
    
    
def aggregate_project(df):
    """
    Dataframe generated by grouping by the project and summing hours
    for each project.

    Args:
        df: The DataFrame containing user data.

    Returns:
        Aggregated data by project.
    """
    df_agg = df.groupby('project')['hours'].sum()
    df_agg = df_agg.sort_values(ascending = True)
    return df_agg


def plotly_chart(df_agg,criteria,warrior,total_hours):
    """
    Create a Plotly horizontal bar chart for the visualization of the 
    checkin times of the user based on a certain criteria (time segment).

    Args:
        df_agg: Aggregated project data.
        criteria: The filtering criteria.
        warrior: The selected warrior.
        total_hours: Total hours for the selected data.

    Returns:
        A Plotly chart.
    """
    fig = go.Figure()
    fig.add_trace(go.Bar(
                    x = df_agg.values.round(2),
                    y = df_agg.index,
                    text = df_agg.values.round(2),
                    orientation='h'
                    ))
    
        
    fig.update_layout(
        title=f'Simple {criteria} Checkin Summary of {warrior.title()}',
        xaxis=dict(
                        showgrid=True,
                        showline=False,
                        showticklabels=True,
                        linewidth=2,
                    )
        )
    
    fig.add_annotation(
        x=max(df_agg.values),
        y=0,
        xref="x",
        yref="y",
        text="Total of "+total_hours,
        font=dict(
            family="Arial, sans-serif",
            size=25,
            color="#000000"
            ),
        align="left",
        ax=0,
        ay=0,
        bordercolor="#000000",
        borderwidth=2,
        borderpad=4,
        bgcolor="#ffffff",
        opacity=0.6
        )
    return fig


def dec2hms(value):
    """
    Converts a decimal number to HH:MM:SS format.

    Args:
        value: The decimal number to be converted.

    Returns:
        The time in HH:MM:SS format.
    """
    h = value
    m = 60 * (h % 1)
    s = 60 * (m % 1)
    h_string = "%d:%02d:%02d" % (h, m, s)
    return h_string
    

if __name__ == '__main__':
    
    header = st.container()
    secret = st.secrets['service_account']
    st.markdown(""" --- """)
    
    if st.session_state['from_csv'] == 0:
        # automatically queries bigquery table unless CSV is loaded
        df = gather_bqdata(st.session_state['i'],secret)
    else:
        # cleaned dataframe is loaded into the session state
        df = df.session_state['df']
    
    response = ''
    success = True
    error = None
    
    colA,colB,colC = st.columns([1,1,1])
    
    with st.sidebar:
        
        st.markdown(""" --- """)
        st.markdown("""### Load Data from CSV source""")
        file_link = st.selectbox(
                                'File Location:',
                                 options = [hard_coded_link]
                                 )
        
        if st.button('Load, Clean, and Update Data'):
        #If button is clicked, the loading, cleaning, and updating of data proceeds
            df_raw,df = cleaning_utils.cleaning_process(hard_coded_link)
            success,error = gbq_utils.write_process(df,secret)
            st.session_state['from_csv'] = 1
            st.session_state['df'] = df
            st.session_state['df_raw'] = df_raw
            
        st.markdown(""" --- """)
        
        st.markdown("""### Load Data from GBQ""")
        
        if st.button('Load Now!'):
            #If button is clicked, the reloading of bgq data proceeds
            st.session_state['i'] +=1
            df = gather_bqdata(st.session_state['i'],secret)
            st.session_state['from_csv'] = 0
        st.markdown(""" --- """)
    
    mainA,mainB = st.columns([1,3])
    
    with mainA:
        # select your favorite GoT Character
        warrior = st.selectbox(label = 'Select Warrior',
                               options = get_warriors(df))
        # select the date you are interested in
        date_of_interest = st.date_input(label = 'Select Date',
                                         min_value = generate_dates(df,warrior)[0],
                                         max_value = generate_dates(df,warrior)[1],
                                         value = generate_dates(df,warrior)[0])
        # select the time segment
        date_segment = st.radio(label = 'Filter by',
                                options = ['Day',
                                           'Week',
                                           'Month',
                                           'Year',
                                           'Overall'
                                           ])

    with mainB:
        i_header = st.container()
        table_tab, charts_tab, raw_tab = st.tabs([
            'View All User Data in a Table',
            'View Data in Charts',
            'Raw and Cleaned Tables'
            ])
        with table_tab:
            p1,cTable,p2 = st.columns([2,7,1])
            with cTable:
                df_temp,time_str = df_filter(df[df.user==warrior],
                                             date_of_interest,date_segment)
                if len(df_temp)>0:
                    st.dataframe(df_temp.reset_index(drop=True))
                else:
                    st.info(f"""Sorry dear, it seems that {warrior.title()} 
                            didn't check in for this time and segment""")    
        
        with charts_tab:
            df_agg = aggregate_project(df_temp)
            total_hours =  dec2hms(df_agg.sum())
            if sum(df_agg)>0:
                st.plotly_chart(plotly_chart(df_agg,date_segment,
                                             warrior,total_hours))
            else:
                st.info(f"""Sorry dear, it seems that {warrior.title()} didn't
                        check in for this time and segment""")
                
        with raw_tab:
            st.info("""Raw table is only going to show 
                    if Data is loaded from CSV source""")
            if st.session_state['from_csv'] == 1:
                cCA,cCB = st.columns([1,1])
                with cCA:
                    st.markdown("""### Raw Data""")
                    st.write(st.session_state['df_raw'])
                with cCB:
                    st.markdown("""### Cleaned Data""")
                    st.write(st.session_state['df'])
    if success==False:
        st.info(error)
    
    st.markdown(""" --- """)
    ### Names and time info are updated
    header.markdown(f"""## {warrior.title()}'s Check-in Information""")
    i_header.markdown(f"""### Data for {time_str} """)
